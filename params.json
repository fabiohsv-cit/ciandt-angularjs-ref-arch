{"name":"Angular Jedi Project","tagline":"Reference Architecture","body":"## Estrutura base\r\n\r\n### Recursos gerais\r\n\tassets - componentes externos ou não vinculados aos componentes angular do projeto\r\n\tassets\\libs - bibliotecas externas de terceiros (ex: jquery, bootstrap, etc)\r\n\tassets\\css - css de terceiros\r\n\tassets\\css\\app.css - css de customização do projeto (o único que deve ser modificado)\r\n\tassets\\fonts - fontes utilizadas pelo projeto\r\n\tassets\\img - imagens utilizadas na montagem do site\r\n\tassets\\js - scripts não angular customizados ou criados no projeto\r\n\r\n### Componentes Gerais Angular\r\n\tapp - configuração e componentes angular específicas do projeto\r\n\tapp\\app.js - script com as configurações básicas angular da aplicação\r\n\tapp\\common - foundation da arquitetura angular que suportarão todos os módulos do projeto (directives, filters, components, etc)\r\n\tapp\\common\\common-app.js - script para configuração do módulo common, onde serão importados as dependências globais do sistema\r\n\tapp\\common\\env\\common-env.js - json com variaveis de ambiente gerais da aplicação\r\n\tapp\\common\\i18n\\resources_[en|pt|*].js - json de resources para i18n dos componentes deste módulo\r\n\tapp\\common\\components - componentes angular especializados para o projeto\r\n\tapp\\common\\components\\[component] - contendo js, html, etc.\r\n\tapp\\common\\components\\header - componente de tela para montagem do header\r\n\tapp\\common\\components\\navegation - componente de tela para montagem do menu\r\n\tapp\\common\\features\\[submodule]\\[feature] - funcionalidades globais do sistema, como telas de login, etc.\r\n\tapp\\common\\features\\auth - telas globais relacionadas com autenticação\r\n\t\r\n- as rota para as funcionalidades deverão seguir o seguinte padrão: /common/[submodule]/[feature]\r\n\r\n### Estrutura por módulo\r\n\tapp\\[module] - módulo específico, contendo funcionalidades de negócio\r\n\tapp\\[module]\\[module]-app.js - script para configuração do módulo, onde serão importados as dependências específicas deste módulo\r\n\tapp\\[module]\\env\\[module]-env.js - json com variaveis de ambiente do módulo\r\n\tapp\\[module]\\i18n\\resources_[en|pt|*].js - json de resources para i18n dos componentes e funcionalidades deste módulo\r\n\tapp\\[module]\\components\\[component]\\[component].[type] - componentes angular especializados para o módulo (js, html, etc)\r\n\tapp\\[module]\\features\\[submodule*]\\[feature] - funcionalidade de negócio do módulo\r\n\tapp\\[module]\\features\\[submodule*]\\[feature]\\[feature]-ctrl.js - controller\r\n\tapp\\[module]\\features\\[submodule*]\\[feature]\\[feature]-service.js - service\r\n\tapp\\[module]\\features\\[submodule*]\\[feature]\\[feature]-directive.js - directive\r\n\tapp\\[module]\\features\\[submodule*]\\[feature]\\[feature]-filter.js - filter\r\n\tapp\\[module]\\features\\[submodule*]\\[feature]\\[feature].html - página\r\n\tapp\\[module]\\features\\[submodule*]\\[feature]\\[feature]\\view\\*.html - se houver mais de um arquivo html, organizá-los na pasta view\r\n\t\r\n- as rota para as funcionalidades deverão seguir o seguinte padrão: /[module]/[submodule]/[feature]\r\n\r\n## Padrões e Restrições da Arquitetura\r\n\r\n### Gerais\r\n\r\n- Utilizar requirejs para controlar carregamento sob demanda dos arquivos javascripts\r\n- Utilizar mecanismo de hash nos nomes dos arquivos para evitar cache do browser. Recomenda-se utilizar o componente [grunt-filerev](https://www.npmjs.com/package/grunt-filerev)\r\n- Utilizar mecanismo [factory](https://github.com/ng-jedi/factory) para declarar controllers, services, filters, directives, modais, etc.\r\n- Sempre incluir dependências externas pelo bower, incluindo no main.js e na configuração shim\r\n```bash\r\nbower install [nome_dep] --save\r\n```\r\n- Todo arquivo javascript deve ser carregado pelo [module]-app.js de seu módulo\r\n- Recursos ligados a uma funcionalidade devem ser criados na estrutura de pastas da funcionalidade\r\n```bash\r\napp\\[module]\\features\\[submodule*]\\[feature]\\[recursos da feature]\r\n```\r\n- Componentes devem ser criados na estrutura abaixo e não devem ser telas, devem ser componentes que compõem tela, trechos parciais de html ou simplesmente filters, utilitários, etc:\r\n```bash\r\napp\\[module]\\componentes\\[component]\\[recursos do componente]\r\n```\r\n- Css devem ser codificados/customizados apenas no arquivo assets\\css\\app.css, demais css são de terceiros e não devem ser alterados diretamente\r\n- Scripts de terceiros não devem ser alterados, em vez disso tentar criar uma versão nova e publicar no bower, no pior caso criar no projeto na pasta assets\\js\\\r\n- Valores hardcode que representam diretórios ou informações que podem ser alteradas de acordo com o ambiente, devem ser transferidos para o script [module]-env.json do módulo específico e acessada:\r\n```bash\r\nenvSettings[.module].[variable]\r\n```\r\n- Todos os textos dos htmls devem fazer uso da diretiva [i18n](https://github.com/ng-jedi/i18n), para possibilitar a internacionalização posterior ou mesmo durante o projeto.\r\n- Métodos, classes, variáveis, etc... sempre escritos em inglês.\r\n- Métodos, parâmetros de métodos e variáveis sempre no formato camelCase.\r\n- Nome do recurso (controller, modal, service, etc.) sempre no formato PascalCase.\r\n- Para evitar conflitos, todos os componentes/recursos angular devem ter o namespace no seguinte padrão:\r\n```bash\r\napp.[module].[submodule].[feature*].[component], ex: app.security.auth.userprofile.UserProfileCtrl\r\n```\r\n- Sempre usar a declaração 'use strict'; ao início de todo arquivo .js\r\n- Nomes de pastas e arquivos devem ser tudo em minúsculo.\r\n- Todos os componentes angular devem ter dependencias injetadas pelo nome, evitar declarar apenas no construtor do componente, uma vez que a minificação encurtará os nomes dos parâmetros.\r\n- Fazer uso de logs atravez do componente $log em vez do console.log\r\n- Não usar a function “alert” nativa do js, em vez disso usar o componente [dialogs](https://github.com/ng-jedi/dialogs)\r\n- Para camada de serviço, utilizar componente de abstração [Restangular](https://github.com/mgonto/restangular)\r\n\r\n### Controllers\r\n\r\n- Utilizar mecanismo [factory](https://github.com/ng-jedi/factory), método factory.newController\r\n- Utilizar padrão VM para declaração dos atributos e métodos do controlador\r\n- Nomenclatura:\r\n\t- Pasta física: app\\\\[module]\\features\\\\[submodule]\\\\[feature]\\\r\n\t- Nome Controller: app.[module].[submodule].[feature*].[feature]Ctrl\r\n\t- Model: [feature]Model\r\n- No corpo do controle deve-se seguir a seguinte ordem de declaração:\r\n* Declaração dos serviços\r\n```javascript\r\n\tvar service = SecurityRestService.all('admin/feature');\r\n```\r\n* Declaração do vm (view model)\r\n```javascript\r\n\tvar vm = this;\r\n```\r\n* Declaração do model e demais variáveis de controle\r\n```javascript\r\n\tvm.featureRegistrationModel = { id: 1, name: 'teste 1' };\r\n\tvm.maxFileCount = 0;\r\n\tvm.pageSize = $rootScope.appContext.defaultPageSize;\r\n```\r\n* Bind dos métodos\r\n```javascript\r\n\tvm.filter = filter;\r\n\tvm.remove = remove;\r\n\tvm.clear = clear;\r\n```\r\n* Execuções de métodos, carregamentos de dados ou qualquer execução na inicialização da tela\r\n```javascript\r\n\tloadSystems(function (systems) {\r\n\t\tvm.featureRegistrationModel.systems = systems;\r\n\t});\r\n```\r\n* Declaração dos métodos e seu statement\r\n```javascript\r\n\tfunction loadSystems(success) {\r\n\t\tconsole.log('Recuperando systems');\r\n\t\tSecurityRestService.all('admin/system').getList().then(success);\r\n\t}\r\n```\r\n- Não deve haver regra de negócio nos controllers, o mesmo deverá estar presente no escopo das APIs apenas.\r\n- Serviços não devem ser expostos no vm nem em nenhum outro atributo, devem sempre passar por métodos do controller.\r\n- Todos os atributos da tela que forem relacionados ao modelo devem ser declarados no vm.[feature]Model, ex:\r\n```javascript\r\nvm.featureRegistrationModel = { id: 1, name: 'teste 1' };\r\n```\r\n\r\n### Views\r\n- Nomenclatura:\r\n\t- Pasta física: app\\\\[module]\\features\\\\[submodule]\\\\[feature]\\\r\n\t- Nome página: [feature].html\r\n- Sempre construído com html puro, seguindo os padrões estruturais do twitter bootstrap, sem javascript e usando apenas diretivas angular\r\n- ng-repeat deve sempre ser declarado com track by, para evitar problemas de performance\r\n- Utilizar componentes [layout](https://github.com/ng-jedi/layout), em especial o app-input na declaração dos campos da tela, para mantr todos no mesmo padrão visual\r\n- Em tabelas de consultas, usar por padrão a diretiva [at-table](https://github.com/mateusmcg/angular-table-restful) com paginação via api rest\r\n- Na declaração do controller da tela, usar alias em formato camelCase, ex:\r\n```html\r\nng-controller=\"app.framework.imports.importfiles.ImportFilesCtrl as importFilesCtrl\"\r\n```\r\n- Não declarar styles nos elementos html, em vez disso usar classe dos css de terceiros ou os declarados no arquivo assets\\css\\app.css\r\n- Todo texto em html deverá fazer uso da diretiva jd-i18n\r\n```html\r\n<jd-i18n>Texto qualquer<jd-i18n>\r\n\r\nOu\r\n\r\n<a jd-i18n>Texto qualquer<\\a>\r\n```\r\n\r\n### Directives\r\n- Utilizar mecanismo [factory](https://github.com/ng-jedi/factory), método factory.newDirective\r\n- Diretivas sempre declaradas com o nome do módulo e submódulo, para evitar duplicidade e sobreposição em caso de projetos grandes e distribuídos\r\n- Nomenclatura:\r\n\t- **Se geral para o módulo**\r\n\t- Arquivo: app\\\\[module]\\components\\\\[component]\\\\[component]-directive.js\r\n\t- Nome diretiva: app-[module]-[component]-[diretiva]\r\n\t- **Se for de uma feature**\r\n\t- Arquivo: app\\\\[module]\\features\\\\[feature]\\\\[feature]-directive.js\r\n\t- Nome diretiva: app-[module]-[submodule]-[feature]-[diretiva]\r\n\r\n### Filters\r\n- Utilizar mecanismo [factory](https://github.com/ng-jedi/factory), método factory.newFilter\r\n- Nomenclatura:\r\n\t- **Se geral para o módulo**\r\n\t- Arquivo: app\\\\[module]\\components\\\\[component]\\\\[component]-filter.js\r\n\t- Nome diretiva: app[module][component][filter]\r\n\t- **Se for de uma feature**\r\n\t- Arquivo: app\\\\[module]\\features\\\\[feature]\\\\[feature]-filter.js\r\n\t- Nome diretiva: app[module][submodule][feature][filter]\r\n\r\n### Modais\r\n- Utilizar mecanismo [factory](https://github.com/ng-jedi/factory), método factory.newModal\r\n- Seguir mesmas regras do controller + directive, modal utiliza os dois tipos de definição juntas.\r\n\r\n## Referências:\r\n\r\n### ng-jedi scaffold:\r\n- https://github.com/ng-jedi/generator-ng-jedi-ref-arch\r\n\r\n### ng-jedi components:\r\n- https://github.com/ng-jedi/breadcrumb\r\n- https://github.com/ng-jedi/dialogs\r\n- https://github.com/ng-jedi/factory\r\n- https://github.com/ng-jedi/i18n\r\n- https://github.com/ng-jedi/layout\r\n- https://github.com/ng-jedi/loading\r\n- https://github.com/ng-jedi/utilities\r\n\r\n### Fontes externas de pesquisa:\r\n- https://scotch.io/tutorials/angularjs-best-practices-directory-structure\r\n- https://github.com/johnpapa/angular-styleguide","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}